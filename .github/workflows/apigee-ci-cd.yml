name: Apigee CI with apigeecli

# Controls when the workflow will run
on: push

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Apigeecli Version
        #uses: docker://ghcr.io/apigee/apigeecli:latest
        uses: docker://ghcr.io/apigee/apigeecli:v1.125.1-beta
        id: apigeecli-version
        with:
          args: --version

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3

      # Set Variables depending on branch
      - name: Set Variables for [Main] branch
        if: github.ref == 'refs/heads/main'
        run: |
          echo "APIGEE_ORG=ssv-apigee-asm-demo" >> $GITHUB_ENV
          echo "APIGEE_ENV=eval" >> $GITHUB_ENV
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Set Variables for [Prod] branch
        if: github.ref == 'refs/heads/prod'
        run: |
          echo "APIGEE_ORG=ssv-apigee-asm-demo" >> $GITHUB_ENV
          echo "APIGEE_ENV=eval" >> $GITHUB_ENV
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Set Variables for branch not [Main], not [Prod]
        if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/prod'
        run: |
          echo "APIGEE_ORG=ssv-apigee-asm-demo" >> $GITHUB_ENV
          echo "APIGEE_ENV=eval" >> $GITHUB_ENV
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      # Create Dependencies (npm) Cache 
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` 
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      
      # Install dependencies (npm)
      - name: Install Dependencies
        run: npm install --silent --no-fund

      # Run Static Code analysis and upload lint results
      - name: Static Code Analysis
        run: npm run lint

      - name: Archive Apigeelint results
        uses: actions/upload-artifact@v2
        with:
          name: apigeelint-report
          path: ./code_test_output/apigeelint-output.html
          retention-days: 5
      
      - name: Archive ESLint results
        uses: actions/upload-artifact@v2
        with:
          name: eslint-report
          path: ./code_test_output/eslint-output.html
          retention-days: 5

      # Run Unit Testing and Code Coverage
      - name: Unit Testing and Code Coverage
        run: npm run unit-test

      - name: Archive Code Coverage results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: ./code_test_output/coverage-output.html
          retention-days: 5

      # - name: Authenticate Google Cloud
      #   id: 'gcp-auth'
      #   uses: google-github-actions/auth@v1
      #   with:
      #     workload_identity_provider: 'projects/769749427232/locations/global/workloadIdentityPools/apigee-ci-cd-pool/providers/apigee-ci-cd-pool-provider'
      #     service_account: 'apigee-ci-cd@ssv-apigee-asm-demo.iam.gserviceaccount.com'
      #     token_format: 'access_token'

      # - name: Apigeecli Get Org
      #   #uses: docker://ghcr.io/apigee/apigeecli:latest
      #   uses: docker://ghcr.io/apigee/apigeecli:v1.125.1-beta
      #   id: apigeecli-get-org
      #   with:
      #     args: orgs get -o ${{ env.APIGEE_ORG }} -t ${{ steps.gcp-auth.outputs.access_token }}

      # - name: Apigee Target Server
      #   #uses: docker://ghcr.io/apigee/apigeecli:latest
      #   uses: docker://ghcr.io/apigee/apigeecli:v1.125.1-beta
      #   id: apigee-target-server
      #   with:
      #     args: targetservers import -f config/apigee/env/${{ env.APIGEE_ENV }}/targetServers.json --env ${{ env.APIGEE_ENV }} --org ${{ env.APIGEE_ORG }} --token ${{ steps.gcp-auth.outputs.access_token }}

      # - name: Apigee proxy deploy 
      #   #uses: docker://ghcr.io/apigee/apigeecli:latest
      #   uses: docker://ghcr.io/apigee/apigeecli:v1.125.1-beta
      #   id: apigee-proxy-deploy
      #   with:
      #     args: apis create bundle -f apiproxy -n currency-v2 --org ${{ env.APIGEE_ORG }} --env ${{ env.APIGEE_ENV }} --token ${{ steps.gcp-auth.outputs.access_token }} --wait -r

      # Run Functional test
      - name: Functional Testing
        run: npm run integration-test

      - name: Archive Apickli results
        uses: actions/upload-artifact@v3
        with:
          name: apickli-report
          path: ./cucumber-report.html
          retention-days: 5